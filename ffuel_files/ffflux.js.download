import fileSaver from 'https://cdn.skypack.dev/pin/file-saver@v2.0.5-UsWqrW8RsYF08S1pEHIw/mode=imports,min/optimized/file-saver.js';

const width = 700;
const height = 700;

document.querySelector('#ffflux').remove();

const svg = SVG()
  .viewbox(0, 0, width, height)
  .width(700)
  .height(700)
  .addTo('#ffflux-wrapper')
  .attr('id', 'ffflux');
// .attr("preserveAspectRatio", "xMidYMid slice");

function rand(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}
window.rand = rand;

function generate(
  color1 = 'hsl(315, 100%, 72%)',
  color2 = 'hsl(227, 100%, 50%)',
  frequencyX = 0.005,
  frequencyY = 0.003,
  octaves = '2',
  saturate = false,
  angle = '150',
  blurX = 20,
  blurY = 0,
  seed = 2,
  mode = 'color-dodge',
  linear = true
) {
  svg.clear();

  if (linear) {
    svg
      .defs()
      .add(
        `<linearGradient gradientTransform="rotate(${angle}, 0.5, 0.5)" x1="50%" y1="0%" x2="50%" y2="100%" id="ffflux-gradient"><stop stop-color="${color1}" stop-opacity="1" offset="0%"></stop><stop stop-color="${color2}" stop-opacity="1" offset="100%"></stop></linearGradient>`
      );
  } else {
    svg.defs().add(`<radialGradient id="ffflux-gradient">
      <stop offset="0%" stop-color="${color1}" />
      <stop offset="100%" stop-color="${color2}" />
    </radialGradient>`);
  }

  svg.defs()
    .add(`<filter id="ffflux-filter" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
  <feTurbulence type="fractalNoise" baseFrequency="${frequencyX} ${frequencyY}" numOctaves="${octaves}" seed="${seed}" stitchTiles="stitch" x="0%" y="0%" width="100%" height="100%" result="turbulence"/>
  <feGaussianBlur stdDeviation="${blurX} ${blurY}" x="0%" y="0%" width="100%" height="100%" in="turbulence" edgeMode="duplicate" result="blur"/>
  <feBlend mode="${mode}" x="0%" y="0%" width="100%" height="100%" in="SourceGraphic" in2="blur" result="blend"/>
  ${
    saturate
      ? `<feColorMatrix type="saturate" values="3" x="0%" y="0%" width="100%" height="100%" in="blend" result="colormatrix"/>`
      : ''
  }
</filter>`);

  svg
    .rect(width, height)
    .fill('url(#ffflux-gradient)')
    .attr('filter', 'url(#ffflux-filter)');
  // svg.rect(width, height).fill('blue');
}
window.generate = generate;

generate();

const svgEl = document.querySelector('#ffflux');

function copy(el) {
  svgEl.removeAttribute('id');
  const svgMarkup = svg.svg();
  svg.attr('id', 'ffflux');
  copyTextToClipboard(svgMarkup, el);
}
window.copy = copy;

function download(el) {
  svgEl.removeAttribute('id');
  const svgMarkup = svg.svg();
  svg.attr('id', 'ffflux');
  const svgBlob = new Blob([svgMarkup], {
    type: 'text/plain;charset=utf-8',
  });
  fileSaver.saveAs(svgBlob, 'ffflux.svg');
}
window.download = download;

// copy text

// Inspired from answer: https://stackoverflow.com/a/30810322 by Dean Taylor: https://stackoverflow.com/users/406712/dean-taylor
function copyTextToClipboard(text, el) {
  navigator.clipboard.writeText(text).then(
    function () {
      const originalText = el.innerHTML;
      el.classList.add('bounce');

      // Feather icons: https://feathericons.com/, MIT licensed
      el.innerHTML = `<svg class="inline" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg> <span class="hidden sm:inline">copied!</span>`;

      setTimeout(() => {
        el.classList.remove('bounce');
        el.innerHTML = originalText;
      }, 1500);
    },
    function (err) {
      console.error('Async: Could not copy text: ', err);
    }
  );
}

function setOpacity(value) {
  svg.opacity(value);
}
window.setOpacity = setOpacity;
